#!/bin/bash

# Script d'installation interactif pour Cloudflare
# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}    Setup Cloudflare pour Motiv üöÄ     ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Fonction pour demander confirmation
confirm() {
    read -p "$1 (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        return 0
    else
        return 1
    fi
}

# Fonction pour afficher le statut
show_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

# 1. V√©rifier si Wrangler est install√©
echo -e "${YELLOW}üì¶ V√©rification de Wrangler...${NC}"
if ! command -v wrangler &> /dev/null; then
    echo -e "${RED}Wrangler n'est pas install√© globalement.${NC}"
    if confirm "Voulez-vous l'installer globalement ?"; then
        npm install -g wrangler
        show_status $? "Installation de Wrangler"
    else
        echo "Utilisation de npx wrangler..."
        WRANGLER="npx wrangler"
    fi
else
    WRANGLER="wrangler"
    echo -e "${GREEN}‚úÖ Wrangler est install√©${NC}"
fi

# 2. V√©rifier la connexion √† Cloudflare
echo -e "\n${YELLOW}üîê V√©rification de la connexion Cloudflare...${NC}"
$WRANGLER whoami &> /dev/null
if [ $? -ne 0 ]; then
    echo -e "${RED}Vous n'√™tes pas connect√© √† Cloudflare.${NC}"
    if confirm "Voulez-vous vous connecter maintenant ?"; then
        $WRANGLER login
        show_status $? "Connexion √† Cloudflare"
    else
        echo -e "${RED}‚ö†Ô∏è  La connexion est requise pour continuer.${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ Connect√© √† Cloudflare${NC}"
fi

# 3. Cr√©er ou v√©rifier la base D1
echo -e "\n${YELLOW}üóÑÔ∏è  Configuration de la base de donn√©es D1...${NC}"
echo "V√©rification des bases existantes..."
$WRANGLER d1 list

if confirm "Voulez-vous cr√©er une nouvelle base D1 'motiv-db' ?"; then
    $WRANGLER d1 create motiv-db
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Base D1 cr√©√©e${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Copiez l'ID de la base et mettez-le dans wrangler.toml${NC}"
        read -p "Appuyez sur Entr√©e quand c'est fait..."
    fi
else
    echo "Utilisation de la base existante."
fi

# 4. Cr√©er le namespace KV
echo -e "\n${YELLOW}üîë Configuration du namespace KV pour les sessions...${NC}"
if confirm "Voulez-vous cr√©er le namespace KV 'SESSIONS' ?"; then
    $WRANGLER kv namespace create SESSIONS
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Namespace KV cr√©√©${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è  Copiez l'ID du namespace et mettez-le dans wrangler.toml${NC}"
        read -p "Appuyez sur Entr√©e quand c'est fait..."
    fi
fi

# 5. Cr√©er le bucket R2
echo -e "\n${YELLOW}üì¶ Configuration du bucket R2 pour les m√©dias...${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  Note: R2 doit √™tre activ√© dans votre dashboard Cloudflare${NC}"
if confirm "R2 est-il activ√© et voulez-vous cr√©er le bucket 'motiv-media' ?"; then
    $WRANGLER r2 bucket create motiv-media
    show_status $? "Cr√©ation du bucket R2"
fi

# 6. Cr√©er le sch√©ma D1
echo -e "\n${YELLOW}üìã Cr√©ation du sch√©ma de base de donn√©es...${NC}"
if confirm "Voulez-vous cr√©er les tables dans D1 ?"; then
    echo "Application du sch√©ma..."
    $WRANGLER d1 execute motiv-db --file=./src/db/schema-d1.sql --remote
    show_status $? "Cr√©ation du sch√©ma"
fi

# 7. Migration des donn√©es (optionnel)
echo -e "\n${YELLOW}üîÑ Migration des donn√©es depuis PostgreSQL...${NC}"
if confirm "Avez-vous des donn√©es √† migrer depuis PostgreSQL ?"; then
    if [ -f ".env" ]; then
        echo "G√©n√©ration du fichier de migration..."
        npm run migrate-to-d1
        if [ $? -eq 0 ] && [ -f "migration-data.sql" ]; then
            echo -e "${GREEN}‚úÖ Fichier de migration cr√©√©${NC}"
            if confirm "Voulez-vous importer les donn√©es maintenant ?"; then
                $WRANGLER d1 execute motiv-db --file=./migration-data.sql --remote
                show_status $? "Import des donn√©es"
            fi
        fi
    else
        echo -e "${RED}‚ö†Ô∏è  Fichier .env non trouv√©. Assurez-vous que DATABASE_URL est configur√©.${NC}"
    fi
fi

# 8. Tester en local
echo -e "\n${YELLOW}üß™ Test en local...${NC}"
if confirm "Voulez-vous tester les Workers en local ?"; then
    echo -e "${BLUE}Lancement des Workers...${NC}"
    echo -e "${YELLOW}Appuyez sur Ctrl+C pour arr√™ter${NC}"
    npm run workers:dev
fi

# 9. D√©ployer
echo -e "\n${YELLOW}üöÄ D√©ploiement...${NC}"
if confirm "Voulez-vous d√©ployer les Workers maintenant ?"; then
    $WRANGLER deploy
    show_status $? "D√©ploiement des Workers"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Workers d√©ploy√©s avec succ√®s !${NC}"
        echo -e "${BLUE}URL de l'API : https://motiv-app.YOUR-SUBDOMAIN.workers.dev${NC}"
    fi
fi

# 10. Configuration Pages
echo -e "\n${YELLOW}üìÑ Configuration de Cloudflare Pages...${NC}"
if confirm "Voulez-vous d√©ployer sur Cloudflare Pages ?"; then
    echo "Build du site..."
    npm run build
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Build r√©ussi${NC}"
        $WRANGLER pages deploy dist
        show_status $? "D√©ploiement sur Pages"
    fi
fi

# 11. Configuration des secrets GitHub
echo -e "\n${YELLOW}üîê Configuration des secrets GitHub...${NC}"
if command -v gh &> /dev/null; then
    echo -e "${GREEN}‚úÖ GitHub CLI install√©e${NC}"
    
    # V√©rifier la connexion GitHub
    gh auth status &> /dev/null
    if [ $? -ne 0 ]; then
        echo -e "${RED}Vous n'√™tes pas connect√© √† GitHub.${NC}"
        if confirm "Voulez-vous vous connecter maintenant ?"; then
            gh auth login
        fi
    fi
    
    # Obtenir le repo
    REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null)
    if [ -z "$REPO" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Impossible de d√©tecter le repository. Assurez-vous d'√™tre dans un repo Git.${NC}"
        read -p "Entrez le nom du repo (format: owner/repo): " REPO
    fi
    
    if [ ! -z "$REPO" ]; then
        echo -e "${BLUE}Repository d√©tect√©: $REPO${NC}"
        
        if confirm "Voulez-vous configurer les secrets GitHub Actions ?"; then
            # Cloudflare Account ID
            if [ ! -z "$($WRANGLER whoami 2>/dev/null | grep 'Account ID')" ]; then
                ACCOUNT_ID=$($WRANGLER whoami 2>/dev/null | grep 'Account ID' | awk '{print $3}')
                echo -e "${GREEN}‚úÖ Account ID trouv√©: $ACCOUNT_ID${NC}"
            else
                read -p "Entrez votre Cloudflare Account ID: " ACCOUNT_ID
            fi
            
            # Cloudflare API Token
            echo -e "${YELLOW}üìù Cr√©ez un token API sur: https://dash.cloudflare.com/profile/api-tokens${NC}"
            echo "Permissions requises:"
            echo "  - Account: Cloudflare Workers Scripts:Edit"
            echo "  - Account: Cloudflare Pages:Edit"
            echo "  - Zone: Zone:Read"
            read -s -p "Collez votre Cloudflare API Token: " CF_API_TOKEN
            echo ""
            
            # Auth Secret
            AUTH_SECRET=$(openssl rand -base64 32)
            echo -e "${GREEN}‚úÖ Auth secret g√©n√©r√©${NC}"
            
            # Worker URL
            WORKER_URL="https://motiv-app.${ACCOUNT_ID}.workers.dev"
            
            # Cr√©er les secrets
            echo -e "\n${BLUE}Cr√©ation des secrets...${NC}"
            
            gh secret set CLOUDFLARE_ACCOUNT_ID -b "$ACCOUNT_ID" -R "$REPO"
            show_status $? "CLOUDFLARE_ACCOUNT_ID"
            
            gh secret set CLOUDFLARE_API_TOKEN -b "$CF_API_TOKEN" -R "$REPO"
            show_status $? "CLOUDFLARE_API_TOKEN"
            
            gh secret set AUTH_SECRET -b "$AUTH_SECRET" -R "$REPO"
            show_status $? "AUTH_SECRET"
            
            gh secret set PRODUCTION_API_URL -b "${WORKER_URL}/api" -R "$REPO"
            show_status $? "PRODUCTION_API_URL"
            
            # Database URL (optionnel)
            if [ -f ".env" ] && grep -q "DATABASE_URL" .env; then
                if confirm "Voulez-vous ajouter DATABASE_URL depuis .env ?"; then
                    DB_URL=$(grep "DATABASE_URL" .env | cut -d '=' -f2-)
                    gh secret set DATABASE_URL -b "$DB_URL" -R "$REPO"
                    show_status $? "DATABASE_URL"
                fi
            fi
            
            echo -e "\n${GREEN}‚úÖ Secrets GitHub configur√©s !${NC}"
            
            # Mettre √† jour wrangler.toml avec le bon auth secret
            if confirm "Voulez-vous mettre √† jour AUTH_SECRET dans wrangler.toml ?"; then
                sed -i.bak "s/AUTH_SECRET = \".*\"/AUTH_SECRET = \"$AUTH_SECRET\"/" wrangler.toml
                echo -e "${GREEN}‚úÖ wrangler.toml mis √† jour${NC}"
            fi
        fi
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  GitHub CLI n'est pas install√©e.${NC}"
    echo "Pour l'installer: https://cli.github.com/"
    echo ""
    echo "Secrets √† configurer manuellement dans GitHub:"
    echo "  - CLOUDFLARE_ACCOUNT_ID"
    echo "  - CLOUDFLARE_API_TOKEN"
    echo "  - AUTH_SECRET"
    echo "  - PRODUCTION_API_URL"
    echo "  - DATABASE_URL (optionnel)"
fi

# R√©sum√©
echo -e "\n${BLUE}========================================${NC}"
echo -e "${BLUE}            Configuration termin√©e!      ${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""
echo -e "${YELLOW}üìù Prochaines √©tapes :${NC}"
echo "1. V√©rifiez que tous les IDs sont corrects dans wrangler.toml"
echo "2. Cr√©ez une Pull Request pour tester le d√©ploiement preview"
echo "3. Mergez sur master/main pour d√©ployer en production"
echo "4. Configurez un domaine personnalis√© dans Cloudflare Pages"
echo ""
echo -e "${GREEN}üéâ Bonne chance avec votre projet Motiv sur Cloudflare !${NC}"