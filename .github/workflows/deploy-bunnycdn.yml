name: Deploy to BunnyCDN

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Astro site
      run: npm run build
      env:
        NODE_ENV: production

    - name: Deploy to BunnyCDN Storage
      env:
        BUNNY_STORAGE_ZONE: ${{ secrets.BUNNY_STORAGE_ZONE }}
        BUNNY_STORAGE_PASSWORD: ${{ secrets.BUNNY_STORAGE_PASSWORD }}
        BUNNY_STORAGE_ENDPOINT: ${{ secrets.BUNNY_STORAGE_ENDPOINT }}
      run: |
        # Debug: Check if variables are set
        echo "BUNNY_STORAGE_ZONE: ${BUNNY_STORAGE_ZONE:+SET}"
        echo "BUNNY_STORAGE_PASSWORD: ${BUNNY_STORAGE_PASSWORD:+SET}"
        echo "BUNNY_STORAGE_ENDPOINT: ${BUNNY_STORAGE_ENDPOINT:+SET}"
        
        # Exit if any required variable is missing
        if [ -z "$BUNNY_STORAGE_ZONE" ] || [ -z "$BUNNY_STORAGE_PASSWORD" ] || [ -z "$BUNNY_STORAGE_ENDPOINT" ]; then
          echo "ERROR: One or more required secrets are not set!"
          echo "Please configure the following secrets in your GitHub repository:"
          echo "- BUNNY_STORAGE_ZONE"
          echo "- BUNNY_STORAGE_PASSWORD"
          echo "- BUNNY_STORAGE_ENDPOINT"
          exit 1
        fi
        
        # Install curl if not available
        which curl || sudo apt-get update && sudo apt-get install -y curl
        
        # Function to upload files recursively
        upload_directory() {
          local local_path=$1
          local remote_path=$2
          
          # Create directory if it doesn't exist
          echo "Creating directory: $remote_path"
          curl -X MKCOL \
            -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
            --fail-with-body \
            "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}${remote_path}" || true
          
          # Upload files in current directory
          for file in "$local_path"/*; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading: $file to ${remote_path}${filename}"
              curl -X PUT \
                -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
                -H "Content-Type: $(file -b --mime-type "$file")" \
                --data-binary "@$file" \
                --fail-with-body \
                "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}${remote_path}${filename}"
            elif [ -d "$file" ]; then
              dirname=$(basename "$file")
              upload_directory "$file" "${remote_path}${dirname}/"
            fi
          done
        }
        
        # Clear existing content (optional - remove if you want to keep old files)
        echo "Clearing existing content..."
        curl -X DELETE \
          -H "AccessKey: $BUNNY_STORAGE_PASSWORD" \
          "https://${BUNNY_STORAGE_ENDPOINT}.bunnycdn.com/${BUNNY_STORAGE_ZONE}/" || true
        
        # Upload the dist directory
        echo "Starting upload..."
        upload_directory "dist" "/"
        
        echo "Upload completed!"

    - name: Purge BunnyCDN Cache
      env:
        BUNNY_API_KEY: ${{ secrets.BUNNY_API_KEY }}
        BUNNY_PULL_ZONE_ID: ${{ secrets.BUNNY_PULL_ZONE_ID }}
      run: |
        echo "Purging CDN cache..."
        curl -X POST \
          -H "AccessKey: $BUNNY_API_KEY" \
          --fail-with-body \
          "https://api.bunny.net/pullzone/${BUNNY_PULL_ZONE_ID}/purgeCache"
        echo "Cache purged successfully!"

    - name: Deploy Summary
      run: |
        echo "üöÄ Deployment completed!"
        echo "üì¶ Files uploaded to BunnyCDN Storage Zone: ${{ secrets.BUNNY_STORAGE_ZONE }}"
        echo "üåê Your site should be available at your configured BunnyCDN URL"
        echo "‚è∞ Deployed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"